;;; .emacs --- Emacs dotfiles

;;; Commentary:
;; EMACS CONFIG FILE, V0.0.1, sorry VIM :(

;; Essential settings.
;;; Code:
(setq-default tab-width 4)
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
(setq delete-old-versions -1 ) ; delete excess backups silently
;(setq version-control t )
;(setq vc-make-backup-files t )
;(setq vc-follow-symlinks t )
;(setq backup-directory-alist `(("." . "~/.emacs.d/backups")) )
;(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) )
(setq inhibit-startup-screen t )
(setq ring-bell-function 'ignore ) ; silent bell on mistakes
(setq-default fill-column 80) ; toggle wrapping text at this column
(menu-bar-mode -1) ; to hide the menu bar
(toggle-scroll-bar -1) ; to hide the scrollbar
(tool-bar-mode -1) ; to hide the tool menu
(global-display-line-numbers-mode t )
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))

;; use-package setup
(require 'package)
(setq package-enable-at-startup nil) ; dont do it immediately
(setq package-archives '(("org"       . "http://orgmode.org/elpa/")
             ("gnu"       . "http://elpa.gnu.org/packages/")
             ("melpa"     . "https://melpa.org/packages/")))
(package-initialize)

;; Bootstrap use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents) ; update archives
  (package-install 'use-package)) ; grab the newest use-package

;; Define packages
(require 'use-package)

;; Always download if not available
(setq use-package-always-ensure t)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
	(rainbow-mode neotree ranger dracula-theme emmet-mode flycheck-color-mode-line web-mode helm-ag rjsx-mode helm-projectile helm evil-visual-mark-mode all-the-icons use-package))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; ====== Themes"
;;"""""""""""""""
(load-theme 'dracula t)

;; ====== PLUGINS"
;;================
(require 'helm-config)
(require 'all-the-icons)

; ====== VIM PLUGINS
(require 'evil) ; Evil-mode to simulate vi(m) keymapping
(evil-mode 1)

; ====== JS PLUGINS
;(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.jsx?$" . web-mode)) ;; auto-enable for .js/.jsx files
(setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'"))) ;; jsx syntax highlighting
  
(add-hook 'web-mode-hook  'web-mode-init-hook)
(require 'flycheck)
;; Enable eslint checker for web-mode
(flycheck-add-mode 'javascript-eslint 'web-mode)
;; Enable flycheck globally
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'web-mode-hook 'emmet-mode)

; ====== SEARCH PLUGINS
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(require 'helm-projectile)
(helm-projectile-on)

; ====== FILE MANAGER"
;=====================
(require 'neotree)
(global-set-key (kbd "C-x C-e") 'neotree-toggle)
(setq neo-theme (if (display-graphic-p) 'icons 'arrow))

;; ====== MAPPING"
;=================
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(helm-mode 1)

(provide 'dot-files)
;;; .emacs ends here
